/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/efacec/nxp/Repositories/hww/harpoon-apps/test_gpio/zephyr/boards/evkmimx8mp/armgcc_aarch64/build_singlecore/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@c0000000
 *   4   /interrupt-controller@38800000
 *   5   /timer
 *   6   /cpus
 *   7   /cpus/cpu@0
 *   8   /cpus/cpu@1
 *   9   /cpus/cpu@2
 *   10  /cpus/cpu@3
 *   11  /soc
 *   12  /soc/ana_pll@30360000
 *   13  /soc/audio-blk-ctrl@30e20000
 *   14  /soc/enet@30be0000
 *   15  /soc/enet@30bf0000
 *   16  /soc/flexcan@308c0000
 *   17  /soc/gpc@303a0000
 *   18  /soc/gpio@30230000
 *   19  /soc/gpio@30240000
 *   20  /soc/ccm@30380000
 *   21  /soc/gpt@302d0000
 *   22  /soc/gpt@302e0000
 *   23  /soc/i2c@30a40000
 *   24  /soc/iomuxc_gpr@30340000
 *   25  /soc/sai@30c10000
 *   26  /soc/sai@30c20000
 *   27  /soc/sai@30c30000
 *   28  /soc/sai@30c50000
 *   29  /soc/sai@30c60000
 *   30  /soc/sai@30c80000
 *   31  /soc/uart@30890000
 *   32  /soc/iomuxc@30330000
 *   33  /soc/iomuxc@30330000/pinctrl
 *   34  /soc/iomuxc@30330000/pinctrl/uart4_default
 *   35  /soc/uart@30a60000
 *   36  /soc/iomuxc@30330000/IOMUXC_UART2_RXD_UART_RX_UART2_RX
 *   37  /soc/iomuxc@30330000/IOMUXC_UART2_TXD_UART_TX_UART2_TX
 *   38  /soc/iomuxc@30330000/pinctrl/uart2_default
 *   39  /soc/iomuxc@30330000/pinctrl/uart2_default/group0
 *   40  /soc/iomuxc@30330000/IOMUXC_UART4_RXD_UART_RX_UART4_RX
 *   41  /soc/iomuxc@30330000/IOMUXC_UART4_TXD_UART_TX_UART4_TX
 *   42  /soc/iomuxc@30330000/pinctrl/uart4_default/group0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_interrupt_controller_38800000) fn(DT_N_S_memory_c0000000)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_interrupt_controller_38800000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_c0000000)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_interrupt_controller_38800000, __VA_ARGS__) fn(DT_N_S_memory_c0000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_interrupt_controller_38800000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_c0000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_timer) fn(DT_N_S_interrupt_controller_38800000) fn(DT_N_S_memory_c0000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_interrupt_controller_38800000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_c0000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_timer, __VA_ARGS__) fn(DT_N_S_interrupt_controller_38800000, __VA_ARGS__) fn(DT_N_S_memory_c0000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_timer, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_interrupt_controller_38800000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_c0000000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@c0000000 */ \
	4, /* /interrupt-controller@38800000 */ \
	5, /* /timer */ \
	6, /* /cpus */ \
	11, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_fsl_mimx8mp DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_fsl_mimx8mp 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "Freescale Semiconductor"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "mimx8mp"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"fsl,mimx8mp"}
#define DT_N_P_compatible_IDX_0 "fsl,mimx8mp"
#define DT_N_P_compatible_IDX_0_STRING_TOKEN fsl_mimx8mp
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN FSL_MIMX8MP
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@c0000000
 *
 * Node identifier: DT_N_S_memory_c0000000
 */

/* Node's full path: */
#define DT_N_S_memory_c0000000_PATH "/memory@c0000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_c0000000_FULL_NAME "memory@c0000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_c0000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_c0000000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_c0000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_c0000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_c0000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_c0000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_c0000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_c0000000_EXISTS 1
#define DT_N_NODELABEL_sram0 DT_N_S_memory_c0000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_c0000000_REG_NUM 1
#define DT_N_S_memory_c0000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_c0000000_REG_IDX_0_VAL_ADDRESS 3221225472 /* 0xc0000000 */
#define DT_N_S_memory_c0000000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_memory_c0000000_RANGES_NUM 0
#define DT_N_S_memory_c0000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_c0000000_IRQ_NUM 0
#define DT_N_S_memory_c0000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_c0000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_c0000000_P_reg {3221225472 /* 0xc0000000 */, 1048576 /* 0x100000 */}
#define DT_N_S_memory_c0000000_P_reg_IDX_0 3221225472
#define DT_N_S_memory_c0000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_c0000000_P_reg_IDX_1 1048576
#define DT_N_S_memory_c0000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_c0000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_c0000000, reg, 0) \
	fn(DT_N_S_memory_c0000000, reg, 1)
#define DT_N_S_memory_c0000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_c0000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_c0000000, reg, 1)
#define DT_N_S_memory_c0000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_c0000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_c0000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_c0000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_c0000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_c0000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_c0000000_P_reg_EXISTS 1

/*
 * Devicetree node: /interrupt-controller@38800000
 *
 * Node identifier: DT_N_S_interrupt_controller_38800000
 *
 * Binding (compatible = arm,gic):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/interrupt-controller/arm,gic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_interrupt_controller_38800000_PATH "/interrupt-controller@38800000"

/* Node's name with unit-address: */
#define DT_N_S_interrupt_controller_38800000_FULL_NAME "interrupt-controller@38800000"

/* Node parent (/) identifier: */
#define DT_N_S_interrupt_controller_38800000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_interrupt_controller_38800000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD(fn) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_interrupt_controller_38800000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_interrupt_controller_38800000_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_interrupt_controller_38800000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_interrupt_controller_38800000_SUPPORTS_ORDS \
	5, /* /timer */ \
	21, /* /soc/gpt@302d0000 */ \
	22, /* /soc/gpt@302e0000 */ \
	31, /* /soc/uart@30890000 */ \
	35, /* /soc/uart@30a60000 */

/* Existence and alternate IDs: */
#define DT_N_S_interrupt_controller_38800000_EXISTS 1
#define DT_N_INST_0_arm_gic DT_N_S_interrupt_controller_38800000
#define DT_N_NODELABEL_gic  DT_N_S_interrupt_controller_38800000

/* Macros for properties that are special in the specification: */
#define DT_N_S_interrupt_controller_38800000_REG_NUM 2
#define DT_N_S_interrupt_controller_38800000_REG_IDX_0_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_REG_IDX_0_VAL_ADDRESS 947912704 /* 0x38800000 */
#define DT_N_S_interrupt_controller_38800000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_interrupt_controller_38800000_REG_IDX_1_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_REG_IDX_1_VAL_ADDRESS 948436992 /* 0x38880000 */
#define DT_N_S_interrupt_controller_38800000_REG_IDX_1_VAL_SIZE 786432 /* 0xc0000 */
#define DT_N_S_interrupt_controller_38800000_RANGES_NUM 0
#define DT_N_S_interrupt_controller_38800000_FOREACH_RANGE(fn) 
#define DT_N_S_interrupt_controller_38800000_IRQ_NUM 0
#define DT_N_S_interrupt_controller_38800000_COMPAT_MATCHES_arm_gic 1
#define DT_N_S_interrupt_controller_38800000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_interrupt_controller_38800000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_COMPAT_MODEL_IDX_0 "gic"
#define DT_N_S_interrupt_controller_38800000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_interrupt_controller_38800000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_interrupt_controller_38800000_P_reg {947912704 /* 0x38800000 */, 65536 /* 0x10000 */, 948436992 /* 0x38880000 */, 786432 /* 0xc0000 */}
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_0 947912704
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_1 65536
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_2 948436992
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_3 786432
#define DT_N_S_interrupt_controller_38800000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_interrupt_controller_38800000, reg, 0) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 1) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 2) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 3)
#define DT_N_S_interrupt_controller_38800000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_interrupt_controller_38800000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 3)
#define DT_N_S_interrupt_controller_38800000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_interrupt_controller_38800000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, reg, 3, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_interrupt_controller_38800000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, reg, 3, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_reg_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_status "okay"
#define DT_N_S_interrupt_controller_38800000_P_status_STRING_TOKEN okay
#define DT_N_S_interrupt_controller_38800000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_interrupt_controller_38800000_P_status_ENUM_IDX 1
#define DT_N_S_interrupt_controller_38800000_P_status_ENUM_TOKEN okay
#define DT_N_S_interrupt_controller_38800000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_interrupt_controller_38800000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_interrupt_controller_38800000, status, 0) \
	fn(DT_N_S_interrupt_controller_38800000, status, 1) \
	fn(DT_N_S_interrupt_controller_38800000, status, 2) \
	fn(DT_N_S_interrupt_controller_38800000, status, 3)
#define DT_N_S_interrupt_controller_38800000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_interrupt_controller_38800000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 3)
#define DT_N_S_interrupt_controller_38800000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_interrupt_controller_38800000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_interrupt_controller_38800000, status, 3, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_interrupt_controller_38800000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_interrupt_controller_38800000, status, 3, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_status_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_compatible {"arm,gic"}
#define DT_N_S_interrupt_controller_38800000_P_compatible_IDX_0 "arm,gic"
#define DT_N_S_interrupt_controller_38800000_P_compatible_IDX_0_STRING_TOKEN arm_gic
#define DT_N_S_interrupt_controller_38800000_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_GIC
#define DT_N_S_interrupt_controller_38800000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_interrupt_controller_38800000, compatible, 0)
#define DT_N_S_interrupt_controller_38800000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_interrupt_controller_38800000, compatible, 0)
#define DT_N_S_interrupt_controller_38800000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_interrupt_controller_38800000, compatible, 0, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_interrupt_controller_38800000, compatible, 0, __VA_ARGS__)
#define DT_N_S_interrupt_controller_38800000_P_compatible_LEN 1
#define DT_N_S_interrupt_controller_38800000_P_compatible_EXISTS 1
#define DT_N_S_interrupt_controller_38800000_P_wakeup_source 0
#define DT_N_S_interrupt_controller_38800000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /timer
 *
 * Node identifier: DT_N_S_timer
 *
 * Binding (compatible = arm,armv8-timer):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/timer/arm,armv8-timer.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_timer_PATH "/timer"

/* Node's name with unit-address: */
#define DT_N_S_timer_FULL_NAME "timer"

/* Node parent (/) identifier: */
#define DT_N_S_timer_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_timer_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_timer_FOREACH_CHILD(fn) 
#define DT_N_S_timer_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_timer_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_timer_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_timer_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_timer_REQUIRES_ORDS \
	0, /* / */ \
	4, /* /interrupt-controller@38800000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_timer_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_timer_EXISTS 1
#define DT_N_INST_0_arm_armv8_timer DT_N_S_timer
#define DT_N_NODELABEL_arch_timer   DT_N_S_timer

/* Macros for properties that are special in the specification: */
#define DT_N_S_timer_REG_NUM 0
#define DT_N_S_timer_RANGES_NUM 0
#define DT_N_S_timer_FOREACH_RANGE(fn) 
#define DT_N_S_timer_IRQ_NUM 4
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq 29
#define DT_N_S_timer_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq 30
#define DT_N_S_timer_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_1_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq 27
#define DT_N_S_timer_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_2_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_type_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq 26
#define DT_N_S_timer_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags 2
#define DT_N_S_timer_IRQ_IDX_3_VAL_flags_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_EXISTS 1
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority 160
#define DT_N_S_timer_IRQ_IDX_3_VAL_priority_EXISTS 1
#define DT_N_S_timer_COMPAT_MATCHES_arm_armv8_timer 1
#define DT_N_S_timer_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_timer_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_timer_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_timer_COMPAT_MODEL_IDX_0 "armv8-timer"
#define DT_N_S_timer_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_timer_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_timer_P_interrupts {1 /* 0x1 */, 13 /* 0xd */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 14 /* 0xe */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 11 /* 0xb */, 2 /* 0x2 */, 160 /* 0xa0 */, 1 /* 0x1 */, 10 /* 0xa */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_timer_P_interrupts_IDX_0 1
#define DT_N_S_timer_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_1 13
#define DT_N_S_timer_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_2 2
#define DT_N_S_timer_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_3 160
#define DT_N_S_timer_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_4 1
#define DT_N_S_timer_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_5 14
#define DT_N_S_timer_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_6 2
#define DT_N_S_timer_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_7 160
#define DT_N_S_timer_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_8 1
#define DT_N_S_timer_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_9 11
#define DT_N_S_timer_P_interrupts_IDX_9_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_10 2
#define DT_N_S_timer_P_interrupts_IDX_10_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_11 160
#define DT_N_S_timer_P_interrupts_IDX_11_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_12 1
#define DT_N_S_timer_P_interrupts_IDX_12_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_13 10
#define DT_N_S_timer_P_interrupts_IDX_13_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_14 2
#define DT_N_S_timer_P_interrupts_IDX_14_EXISTS 1
#define DT_N_S_timer_P_interrupts_IDX_15 160
#define DT_N_S_timer_P_interrupts_IDX_15_EXISTS 1
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, interrupts, 0) \
	fn(DT_N_S_timer, interrupts, 1) \
	fn(DT_N_S_timer, interrupts, 2) \
	fn(DT_N_S_timer, interrupts, 3) \
	fn(DT_N_S_timer, interrupts, 4) \
	fn(DT_N_S_timer, interrupts, 5) \
	fn(DT_N_S_timer, interrupts, 6) \
	fn(DT_N_S_timer, interrupts, 7) \
	fn(DT_N_S_timer, interrupts, 8) \
	fn(DT_N_S_timer, interrupts, 9) \
	fn(DT_N_S_timer, interrupts, 10) \
	fn(DT_N_S_timer, interrupts, 11) \
	fn(DT_N_S_timer, interrupts, 12) \
	fn(DT_N_S_timer, interrupts, 13) \
	fn(DT_N_S_timer, interrupts, 14) \
	fn(DT_N_S_timer, interrupts, 15)
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_timer, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 15)
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 3, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 4, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 5, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 6, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 7, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 8, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 9, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 10, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 11, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 12, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 13, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 14, __VA_ARGS__) \
	fn(DT_N_S_timer, interrupts, 15, __VA_ARGS__)
#define DT_N_S_timer_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_timer, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_timer, interrupts, 15, __VA_ARGS__)
#define DT_N_S_timer_P_interrupts_EXISTS 1
#define DT_N_S_timer_P_compatible {"arm,armv8-timer"}
#define DT_N_S_timer_P_compatible_IDX_0 "arm,armv8-timer"
#define DT_N_S_timer_P_compatible_IDX_0_STRING_TOKEN arm_armv8_timer
#define DT_N_S_timer_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV8_TIMER
#define DT_N_S_timer_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_timer, compatible, 0)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_timer, compatible, 0)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_timer_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_timer, compatible, 0, __VA_ARGS__)
#define DT_N_S_timer_P_compatible_LEN 1
#define DT_N_S_timer_P_compatible_EXISTS 1
#define DT_N_S_timer_P_interrupt_parent DT_N_S_interrupt_controller_38800000
#define DT_N_S_timer_P_interrupt_parent_IDX_0 DT_N_S_interrupt_controller_38800000
#define DT_N_S_timer_P_interrupt_parent_IDX_0_PH DT_N_S_interrupt_controller_38800000
#define DT_N_S_timer_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_timer_P_interrupt_parent_LEN 1
#define DT_N_S_timer_P_interrupt_parent_EXISTS 1
#define DT_N_S_timer_P_wakeup_source 0
#define DT_N_S_timer_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_cpu_2) fn(DT_N_S_cpus_S_cpu_3)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_2) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_3)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_2, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_3)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_3)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	7, /* /cpus/cpu@0 */ \
	8, /* /cpus/cpu@1 */ \
	9, /* /cpus/cpu@2 */ \
	10, /* /cpus/cpu@3 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-a53):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_1_arm_cortex_a53 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-a53"
#define DT_N_S_cpus_S_cpu_0_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_status "disabled"
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_TOKEN disabled
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_IDX 2
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_TOKEN disabled
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, status, 0) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3) \
	fn(DT_N_S_cpus_S_cpu_0, status, 4) \
	fn(DT_N_S_cpus_S_cpu_0, status, 5) \
	fn(DT_N_S_cpus_S_cpu_0, status, 6) \
	fn(DT_N_S_cpus_S_cpu_0, status, 7)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 7)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 4, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 5, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 6, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_a53
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_A53
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 *
 * Binding (compatible = arm,cortex-a53):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_2_arm_cortex_a53 DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_COMPAT_MODEL_IDX_0 "cortex-a53"
#define DT_N_S_cpus_S_cpu_1_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_status "disabled"
#define DT_N_S_cpus_S_cpu_1_P_status_STRING_TOKEN disabled
#define DT_N_S_cpus_S_cpu_1_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_IDX 2
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_TOKEN disabled
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, status, 0) \
	fn(DT_N_S_cpus_S_cpu_1, status, 1) \
	fn(DT_N_S_cpus_S_cpu_1, status, 2) \
	fn(DT_N_S_cpus_S_cpu_1, status, 3) \
	fn(DT_N_S_cpus_S_cpu_1, status, 4) \
	fn(DT_N_S_cpus_S_cpu_1, status, 5) \
	fn(DT_N_S_cpus_S_cpu_1, status, 6) \
	fn(DT_N_S_cpus_S_cpu_1, status, 7)
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 7)
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 3, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 4, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 5, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 6, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_1, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_TOKEN arm_cortex_a53
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_A53
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@2
 *
 * Node identifier: DT_N_S_cpus_S_cpu_2
 *
 * Binding (compatible = arm,cortex-a53):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_2_PATH "/cpus/cpu@2"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_2_FULL_NAME "cpu@2"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_2_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_2_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_2_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_2_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_2_EXISTS 1
#define DT_N_INST_3_arm_cortex_a53 DT_N_S_cpus_S_cpu_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_2_REG_NUM 1
#define DT_N_S_cpus_S_cpu_2_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_REG_IDX_0_VAL_ADDRESS 2 /* 0x2 */
#define DT_N_S_cpus_S_cpu_2_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_2_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_2_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_2_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_2_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_2_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_COMPAT_MODEL_IDX_0 "cortex-a53"
#define DT_N_S_cpus_S_cpu_2_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_2_P_status "disabled"
#define DT_N_S_cpus_S_cpu_2_P_status_STRING_TOKEN disabled
#define DT_N_S_cpus_S_cpu_2_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_IDX 2
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_TOKEN disabled
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, status, 0) \
	fn(DT_N_S_cpus_S_cpu_2, status, 1) \
	fn(DT_N_S_cpus_S_cpu_2, status, 2) \
	fn(DT_N_S_cpus_S_cpu_2, status, 3) \
	fn(DT_N_S_cpus_S_cpu_2, status, 4) \
	fn(DT_N_S_cpus_S_cpu_2, status, 5) \
	fn(DT_N_S_cpus_S_cpu_2, status, 6) \
	fn(DT_N_S_cpus_S_cpu_2, status, 7)
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_2, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 7)
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 3, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 4, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 5, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 6, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_2, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_2, status, 7, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0_STRING_TOKEN arm_cortex_a53
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_A53
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, compatible, 0)
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_2, compatible, 0)
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_2_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_reg {2 /* 0x2 */}
#define DT_N_S_cpus_S_cpu_2_P_reg_IDX_0 2
#define DT_N_S_cpus_S_cpu_2_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, reg, 0)
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_2, reg, 0)
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_2, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_2_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@3
 *
 * Node identifier: DT_N_S_cpus_S_cpu_3
 *
 * Binding (compatible = arm,cortex-a53):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/cpu/arm,cortex-a53.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_3_PATH "/cpus/cpu@3"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_3_FULL_NAME "cpu@3"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_3_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_3_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_3_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_3_REQUIRES_ORDS \
	6, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_3_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_3_EXISTS 1
#define DT_N_INST_0_arm_cortex_a53 DT_N_S_cpus_S_cpu_3

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_3_REG_NUM 1
#define DT_N_S_cpus_S_cpu_3_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_REG_IDX_0_VAL_ADDRESS 3 /* 0x3 */
#define DT_N_S_cpus_S_cpu_3_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_3_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_3_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_3_COMPAT_MATCHES_arm_cortex_a53 1
#define DT_N_S_cpus_S_cpu_3_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_3_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_COMPAT_MODEL_IDX_0 "cortex-a53"
#define DT_N_S_cpus_S_cpu_3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_3_P_compatible {"arm,cortex-a53"}
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0 "arm,cortex-a53"
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0_STRING_TOKEN arm_cortex_a53
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_A53
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3, compatible, 0)
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_3, compatible, 0)
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_3, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_3_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_reg {3 /* 0x3 */}
#define DT_N_S_cpus_S_cpu_3_P_reg_IDX_0 3
#define DT_N_S_cpus_S_cpu_3_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3, reg, 0)
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_3, reg, 0)
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_3, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_3_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_gpio_30230000) fn(DT_N_S_soc_S_gpio_30240000) fn(DT_N_S_soc_S_gpt_302d0000) fn(DT_N_S_soc_S_gpt_302e0000) fn(DT_N_S_soc_S_iomuxc_30330000) fn(DT_N_S_soc_S_iomuxc_gpr_30340000) fn(DT_N_S_soc_S_ana_pll_30360000) fn(DT_N_S_soc_S_ccm_30380000) fn(DT_N_S_soc_S_gpc_303a0000) fn(DT_N_S_soc_S_flexcan_308c0000) fn(DT_N_S_soc_S_uart_30890000) fn(DT_N_S_soc_S_i2c_30a40000) fn(DT_N_S_soc_S_uart_30a60000) fn(DT_N_S_soc_S_enet_30be0000) fn(DT_N_S_soc_S_enet_30bf0000) fn(DT_N_S_soc_S_sai_30c10000) fn(DT_N_S_soc_S_sai_30c20000) fn(DT_N_S_soc_S_sai_30c30000) fn(DT_N_S_soc_S_sai_30c50000) fn(DT_N_S_soc_S_sai_30c60000) fn(DT_N_S_soc_S_sai_30c80000) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30230000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_30240000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpt_302d0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpt_302e0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_gpr_30340000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ana_pll_30360000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ccm_30380000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpc_303a0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcan_308c0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30890000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_30a40000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30a60000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_enet_30be0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_enet_30bf0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c20000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c30000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c50000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c60000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c80000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30230000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_30240000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_302d0000, __VA_ARGS__) fn(DT_N_S_soc_S_gpt_302e0000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, __VA_ARGS__) fn(DT_N_S_soc_S_ana_pll_30360000, __VA_ARGS__) fn(DT_N_S_soc_S_ccm_30380000, __VA_ARGS__) fn(DT_N_S_soc_S_gpc_303a0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcan_308c0000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_30890000, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_30a40000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_30a60000, __VA_ARGS__) fn(DT_N_S_soc_S_enet_30be0000, __VA_ARGS__) fn(DT_N_S_soc_S_enet_30bf0000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c10000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c20000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c30000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c50000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c60000, __VA_ARGS__) fn(DT_N_S_soc_S_sai_30c80000, __VA_ARGS__) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30230000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_30240000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpt_302d0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpt_302e0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_gpr_30340000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ana_pll_30360000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ccm_30380000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpc_303a0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcan_308c0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30890000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_30a40000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30a60000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_enet_30be0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_enet_30bf0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c20000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c30000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c50000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c60000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_sai_30c80000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_gpio_30230000) fn(DT_N_S_soc_S_gpio_30240000) fn(DT_N_S_soc_S_iomuxc_30330000) fn(DT_N_S_soc_S_iomuxc_gpr_30340000) fn(DT_N_S_soc_S_ana_pll_30360000) fn(DT_N_S_soc_S_ccm_30380000) fn(DT_N_S_soc_S_gpc_303a0000) fn(DT_N_S_soc_S_flexcan_308c0000) fn(DT_N_S_soc_S_uart_30a60000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30230000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_30240000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_gpr_30340000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ana_pll_30360000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ccm_30380000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpc_303a0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcan_308c0000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30a60000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30230000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_30240000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, __VA_ARGS__) fn(DT_N_S_soc_S_ana_pll_30360000, __VA_ARGS__) fn(DT_N_S_soc_S_ccm_30380000, __VA_ARGS__) fn(DT_N_S_soc_S_gpc_303a0000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcan_308c0000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_30a60000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30230000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_30240000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_gpr_30340000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ana_pll_30360000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ccm_30380000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpc_303a0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcan_308c0000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_30a60000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	12, /* /soc/ana_pll@30360000 */ \
	13, /* /soc/audio-blk-ctrl@30e20000 */ \
	14, /* /soc/enet@30be0000 */ \
	15, /* /soc/enet@30bf0000 */ \
	16, /* /soc/flexcan@308c0000 */ \
	17, /* /soc/gpc@303a0000 */ \
	18, /* /soc/gpio@30230000 */ \
	19, /* /soc/gpio@30240000 */ \
	20, /* /soc/ccm@30380000 */ \
	21, /* /soc/gpt@302d0000 */ \
	22, /* /soc/gpt@302e0000 */ \
	23, /* /soc/i2c@30a40000 */ \
	24, /* /soc/iomuxc_gpr@30340000 */ \
	25, /* /soc/sai@30c10000 */ \
	26, /* /soc/sai@30c20000 */ \
	27, /* /soc/sai@30c30000 */ \
	28, /* /soc/sai@30c50000 */ \
	29, /* /soc/sai@30c60000 */ \
	30, /* /soc/sai@30c80000 */ \
	31, /* /soc/uart@30890000 */ \
	32, /* /soc/iomuxc@30330000 */ \
	35, /* /soc/uart@30a60000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/ana_pll@30360000
 *
 * Node identifier: DT_N_S_soc_S_ana_pll_30360000
 */

/* Node's full path: */
#define DT_N_S_soc_S_ana_pll_30360000_PATH "/soc/ana_pll@30360000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ana_pll_30360000_FULL_NAME "ana_pll@30360000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ana_pll_30360000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ana_pll_30360000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ana_pll_30360000_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ana_pll_30360000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ana_pll_30360000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ana_pll_30360000_EXISTS 1
#define DT_N_INST_0_nxp_imx_ana DT_N_S_soc_S_ana_pll_30360000
#define DT_N_NODELABEL_ana_pll  DT_N_S_soc_S_ana_pll_30360000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ana_pll_30360000_REG_NUM 1
#define DT_N_S_soc_S_ana_pll_30360000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_REG_IDX_0_VAL_ADDRESS 808845312 /* 0x30360000 */
#define DT_N_S_soc_S_ana_pll_30360000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_ana_pll_30360000_RANGES_NUM 0
#define DT_N_S_soc_S_ana_pll_30360000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ana_pll_30360000_IRQ_NUM 0
#define DT_N_S_soc_S_ana_pll_30360000_COMPAT_MATCHES_nxp_imx_ana 1
#define DT_N_S_soc_S_ana_pll_30360000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_ana_pll_30360000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_COMPAT_MODEL_IDX_0 "imx-ana"
#define DT_N_S_soc_S_ana_pll_30360000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ana_pll_30360000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible {"nxp,imx-ana"}
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_IDX_0 "nxp,imx-ana"
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_ana
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_ANA
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ana_pll_30360000, compatible, 0)
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ana_pll_30360000, compatible, 0)
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ana_pll_30360000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ana_pll_30360000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_LEN 1
#define DT_N_S_soc_S_ana_pll_30360000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_P_reg {808845312 /* 0x30360000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_IDX_0 808845312
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ana_pll_30360000, reg, 0) \
	fn(DT_N_S_soc_S_ana_pll_30360000, reg, 1)
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ana_pll_30360000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ana_pll_30360000, reg, 1)
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ana_pll_30360000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ana_pll_30360000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ana_pll_30360000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ana_pll_30360000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ana_pll_30360000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/audio-blk-ctrl@30e20000
 *
 * Node identifier: DT_N_S_soc_S_audio_blk_ctrl_30e20000
 */

/* Node's full path: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_PATH "/soc/audio-blk-ctrl@30e20000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FULL_NAME "audio-blk-ctrl@30e20000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_CHILD_IDX 21

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_EXISTS 1
#define DT_N_INST_0_nxp_imx_audio_blk_ctrl DT_N_S_soc_S_audio_blk_ctrl_30e20000
#define DT_N_NODELABEL_audio_blk_ctrl      DT_N_S_soc_S_audio_blk_ctrl_30e20000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_REG_NUM 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_REG_IDX_0_VAL_ADDRESS 820117504 /* 0x30e20000 */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_RANGES_NUM 0
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_IRQ_NUM 0
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_COMPAT_MATCHES_nxp_imx_audio_blk_ctrl 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_COMPAT_MODEL_IDX_0 "imx-audio-blk-ctrl"
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible {"nxp,imx-audio-blk-ctrl"}
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_IDX_0 "nxp,imx-audio-blk-ctrl"
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_audio_blk_ctrl
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_AUDIO_BLK_CTRL
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, compatible, 0)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, compatible, 0)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_LEN 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg {820117504 /* 0x30e20000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_IDX_0 820117504
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 0) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 1)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 1)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_reg_EXISTS 1
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status "disabled"
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 0) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 1) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 2) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 3) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 4) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 5) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 6) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 7)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 7)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_audio_blk_ctrl_30e20000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/enet@30be0000
 *
 * Node identifier: DT_N_S_soc_S_enet_30be0000
 */

/* Node's full path: */
#define DT_N_S_soc_S_enet_30be0000_PATH "/soc/enet@30be0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_enet_30be0000_FULL_NAME "enet@30be0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_enet_30be0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_enet_30be0000_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_enet_30be0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_enet_30be0000_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_enet_30be0000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_enet_30be0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_enet_30be0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_enet DT_N_S_soc_S_enet_30be0000
#define DT_N_NODELABEL_enet      DT_N_S_soc_S_enet_30be0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_enet_30be0000_REG_NUM 1
#define DT_N_S_soc_S_enet_30be0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_REG_IDX_0_VAL_ADDRESS 817758208 /* 0x30be0000 */
#define DT_N_S_soc_S_enet_30be0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_enet_30be0000_RANGES_NUM 0
#define DT_N_S_soc_S_enet_30be0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_enet_30be0000_IRQ_NUM 0
#define DT_N_S_soc_S_enet_30be0000_COMPAT_MATCHES_nxp_imx_enet 1
#define DT_N_S_soc_S_enet_30be0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_enet_30be0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_COMPAT_MODEL_IDX_0 "imx-enet"
#define DT_N_S_soc_S_enet_30be0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_enet_30be0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_enet_30be0000_P_compatible {"nxp,imx-enet"}
#define DT_N_S_soc_S_enet_30be0000_P_compatible_IDX_0 "nxp,imx-enet"
#define DT_N_S_soc_S_enet_30be0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_enet
#define DT_N_S_soc_S_enet_30be0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_ENET
#define DT_N_S_soc_S_enet_30be0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30be0000, compatible, 0)
#define DT_N_S_soc_S_enet_30be0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30be0000, compatible, 0)
#define DT_N_S_soc_S_enet_30be0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30be0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30be0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_compatible_LEN 1
#define DT_N_S_soc_S_enet_30be0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_P_reg {817758208 /* 0x30be0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_enet_30be0000_P_reg_IDX_0 817758208
#define DT_N_S_soc_S_enet_30be0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_enet_30be0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30be0000, reg, 0) \
	fn(DT_N_S_soc_S_enet_30be0000, reg, 1)
#define DT_N_S_soc_S_enet_30be0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30be0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, reg, 1)
#define DT_N_S_soc_S_enet_30be0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30be0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30be0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_enet_30be0000_P_status "disabled"
#define DT_N_S_soc_S_enet_30be0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_enet_30be0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_enet_30be0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_enet_30be0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_enet_30be0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_enet_30be0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30be0000, status, 0) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 1) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 2) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 3) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 4) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 5) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 6) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 7)
#define DT_N_S_soc_S_enet_30be0000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30be0000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 7)
#define DT_N_S_soc_S_enet_30be0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30be0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30be0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30be0000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30be0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30be0000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/enet@30bf0000
 *
 * Node identifier: DT_N_S_soc_S_enet_30bf0000
 */

/* Node's full path: */
#define DT_N_S_soc_S_enet_30bf0000_PATH "/soc/enet@30bf0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_enet_30bf0000_FULL_NAME "enet@30bf0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_enet_30bf0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_enet_30bf0000_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_enet_30bf0000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_enet_30bf0000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_enet_30bf0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_enet_30bf0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_enet_qos DT_N_S_soc_S_enet_30bf0000
#define DT_N_NODELABEL_enet_qos      DT_N_S_soc_S_enet_30bf0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_enet_30bf0000_REG_NUM 1
#define DT_N_S_soc_S_enet_30bf0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_REG_IDX_0_VAL_ADDRESS 817823744 /* 0x30bf0000 */
#define DT_N_S_soc_S_enet_30bf0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_enet_30bf0000_RANGES_NUM 0
#define DT_N_S_soc_S_enet_30bf0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_enet_30bf0000_IRQ_NUM 0
#define DT_N_S_soc_S_enet_30bf0000_COMPAT_MATCHES_nxp_imx_enet_qos 1
#define DT_N_S_soc_S_enet_30bf0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_enet_30bf0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_COMPAT_MODEL_IDX_0 "imx-enet-qos"
#define DT_N_S_soc_S_enet_30bf0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_enet_30bf0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_enet_30bf0000_P_compatible {"nxp,imx-enet-qos"}
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_IDX_0 "nxp,imx-enet-qos"
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_enet_qos
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_ENET_QOS
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30bf0000, compatible, 0)
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30bf0000, compatible, 0)
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30bf0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30bf0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_LEN 1
#define DT_N_S_soc_S_enet_30bf0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_P_reg {817823744 /* 0x30bf0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_enet_30bf0000_P_reg_IDX_0 817823744
#define DT_N_S_soc_S_enet_30bf0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_enet_30bf0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30bf0000, reg, 0) \
	fn(DT_N_S_soc_S_enet_30bf0000, reg, 1)
#define DT_N_S_soc_S_enet_30bf0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30bf0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, reg, 1)
#define DT_N_S_soc_S_enet_30bf0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30bf0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30bf0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_enet_30bf0000_P_status "disabled"
#define DT_N_S_soc_S_enet_30bf0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_enet_30bf0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_enet_30bf0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_enet_30bf0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_enet_30bf0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_enet_30bf0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_enet_30bf0000, status, 0) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 1) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 2) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 3) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 4) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 5) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 6) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 7)
#define DT_N_S_soc_S_enet_30bf0000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_enet_30bf0000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 7)
#define DT_N_S_soc_S_enet_30bf0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_enet_30bf0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_enet_30bf0000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_enet_30bf0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_enet_30bf0000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/flexcan@308c0000
 *
 * Node identifier: DT_N_S_soc_S_flexcan_308c0000
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcan_308c0000_PATH "/soc/flexcan@308c0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcan_308c0000_FULL_NAME "flexcan@308c0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcan_308c0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcan_308c0000_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcan_308c0000_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcan_308c0000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcan_308c0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcan_308c0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_flexcan DT_N_S_soc_S_flexcan_308c0000
#define DT_N_NODELABEL_flexcan      DT_N_S_soc_S_flexcan_308c0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcan_308c0000_REG_NUM 1
#define DT_N_S_soc_S_flexcan_308c0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_REG_IDX_0_VAL_ADDRESS 814481408 /* 0x308c0000 */
#define DT_N_S_soc_S_flexcan_308c0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_flexcan_308c0000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcan_308c0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcan_308c0000_IRQ_NUM 0
#define DT_N_S_soc_S_flexcan_308c0000_COMPAT_MATCHES_nxp_imx_flexcan 1
#define DT_N_S_soc_S_flexcan_308c0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcan_308c0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_COMPAT_MODEL_IDX_0 "imx-flexcan"
#define DT_N_S_soc_S_flexcan_308c0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcan_308c0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible {"nxp,imx-flexcan"}
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_IDX_0 "nxp,imx-flexcan"
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_flexcan
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_FLEXCAN
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcan_308c0000, compatible, 0)
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcan_308c0000, compatible, 0)
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcan_308c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcan_308c0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcan_308c0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_P_reg {814481408 /* 0x308c0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_IDX_0 814481408
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcan_308c0000, reg, 0) \
	fn(DT_N_S_soc_S_flexcan_308c0000, reg, 1)
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcan_308c0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flexcan_308c0000, reg, 1)
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcan_308c0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flexcan_308c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcan_308c0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_flexcan_308c0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flexcan_308c0000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpc@303a0000
 *
 * Node identifier: DT_N_S_soc_S_gpc_303a0000
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpc_303a0000_PATH "/soc/gpc@303a0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpc_303a0000_FULL_NAME "gpc@303a0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpc_303a0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpc_303a0000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpc_303a0000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpc_303a0000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpc_303a0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpc_303a0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_gpc DT_N_S_soc_S_gpc_303a0000
#define DT_N_NODELABEL_gpc      DT_N_S_soc_S_gpc_303a0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpc_303a0000_REG_NUM 1
#define DT_N_S_soc_S_gpc_303a0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_REG_IDX_0_VAL_ADDRESS 809107456 /* 0x303a0000 */
#define DT_N_S_soc_S_gpc_303a0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_gpc_303a0000_RANGES_NUM 0
#define DT_N_S_soc_S_gpc_303a0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpc_303a0000_IRQ_NUM 0
#define DT_N_S_soc_S_gpc_303a0000_COMPAT_MATCHES_nxp_imx_gpc 1
#define DT_N_S_soc_S_gpc_303a0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpc_303a0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_COMPAT_MODEL_IDX_0 "imx-gpc"
#define DT_N_S_soc_S_gpc_303a0000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpc_303a0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpc_303a0000_P_compatible {"nxp,imx-gpc"}
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_IDX_0 "nxp,imx-gpc"
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_gpc
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_GPC
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpc_303a0000, compatible, 0)
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpc_303a0000, compatible, 0)
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpc_303a0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpc_303a0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpc_303a0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_P_reg {809107456 /* 0x303a0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_gpc_303a0000_P_reg_IDX_0 809107456
#define DT_N_S_soc_S_gpc_303a0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_gpc_303a0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpc_303a0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpc_303a0000, reg, 0) \
	fn(DT_N_S_soc_S_gpc_303a0000, reg, 1)
#define DT_N_S_soc_S_gpc_303a0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpc_303a0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpc_303a0000, reg, 1)
#define DT_N_S_soc_S_gpc_303a0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpc_303a0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpc_303a0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpc_303a0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpc_303a0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpc_303a0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpc_303a0000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpio@30230000
 *
 * Node identifier: DT_N_S_soc_S_gpio_30230000
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_30230000_PATH "/soc/gpio@30230000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_30230000_FULL_NAME "gpio@30230000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_30230000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_30230000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_30230000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_30230000_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_30230000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_30230000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_30230000_EXISTS 1
#define DT_N_INST_0_nxp_imx_igpio DT_N_S_soc_S_gpio_30230000
#define DT_N_NODELABEL_gpio4      DT_N_S_soc_S_gpio_30230000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_30230000_REG_NUM 1
#define DT_N_S_soc_S_gpio_30230000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_REG_IDX_0_VAL_ADDRESS 807600128 /* 0x30230000 */
#define DT_N_S_soc_S_gpio_30230000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_gpio_30230000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_30230000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_30230000_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_30230000_COMPAT_MATCHES_nxp_imx_igpio 1
#define DT_N_S_soc_S_gpio_30230000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpio_30230000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_COMPAT_MODEL_IDX_0 "imx-igpio"
#define DT_N_S_soc_S_gpio_30230000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_30230000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_30230000_P_compatible {"nxp,imx-igpio"}
#define DT_N_S_soc_S_gpio_30230000_P_compatible_IDX_0 "nxp,imx-igpio"
#define DT_N_S_soc_S_gpio_30230000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_igpio
#define DT_N_S_soc_S_gpio_30230000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IGPIO
#define DT_N_S_soc_S_gpio_30230000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_30230000, compatible, 0)
#define DT_N_S_soc_S_gpio_30230000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30230000, compatible, 0)
#define DT_N_S_soc_S_gpio_30230000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30230000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30230000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30230000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30230000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_30230000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_P_reg {807600128 /* 0x30230000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_gpio_30230000_P_reg_IDX_0 807600128
#define DT_N_S_soc_S_gpio_30230000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_gpio_30230000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_30230000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_30230000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_30230000, reg, 1)
#define DT_N_S_soc_S_gpio_30230000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30230000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_30230000, reg, 1)
#define DT_N_S_soc_S_gpio_30230000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30230000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_30230000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30230000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30230000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_30230000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30230000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/gpio@30240000
 *
 * Node identifier: DT_N_S_soc_S_gpio_30240000
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_30240000_PATH "/soc/gpio@30240000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_30240000_FULL_NAME "gpio@30240000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_30240000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_30240000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_30240000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_30240000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_30240000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_30240000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_30240000_EXISTS 1
#define DT_N_INST_1_nxp_imx_igpio DT_N_S_soc_S_gpio_30240000
#define DT_N_NODELABEL_gpio5      DT_N_S_soc_S_gpio_30240000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_30240000_REG_NUM 1
#define DT_N_S_soc_S_gpio_30240000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_REG_IDX_0_VAL_ADDRESS 807665664 /* 0x30240000 */
#define DT_N_S_soc_S_gpio_30240000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_gpio_30240000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_30240000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_30240000_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_30240000_COMPAT_MATCHES_nxp_imx_igpio 1
#define DT_N_S_soc_S_gpio_30240000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpio_30240000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_COMPAT_MODEL_IDX_0 "imx-igpio"
#define DT_N_S_soc_S_gpio_30240000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_30240000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_30240000_P_compatible {"nxp,imx-igpio"}
#define DT_N_S_soc_S_gpio_30240000_P_compatible_IDX_0 "nxp,imx-igpio"
#define DT_N_S_soc_S_gpio_30240000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_igpio
#define DT_N_S_soc_S_gpio_30240000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IGPIO
#define DT_N_S_soc_S_gpio_30240000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_30240000, compatible, 0)
#define DT_N_S_soc_S_gpio_30240000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30240000, compatible, 0)
#define DT_N_S_soc_S_gpio_30240000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30240000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30240000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30240000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30240000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_30240000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_P_reg {807665664 /* 0x30240000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_gpio_30240000_P_reg_IDX_0 807665664
#define DT_N_S_soc_S_gpio_30240000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_gpio_30240000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_30240000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_30240000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_30240000, reg, 1)
#define DT_N_S_soc_S_gpio_30240000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_30240000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_30240000, reg, 1)
#define DT_N_S_soc_S_gpio_30240000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_30240000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_30240000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30240000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_30240000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_30240000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_30240000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/ccm@30380000
 *
 * Node identifier: DT_N_S_soc_S_ccm_30380000
 *
 * Binding (compatible = nxp,imx-ccm):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/clock/nxp,imx-ccm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ccm_30380000_PATH "/soc/ccm@30380000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ccm_30380000_FULL_NAME "ccm@30380000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ccm_30380000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ccm_30380000_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ccm_30380000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ccm_30380000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ccm_30380000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ccm_30380000_SUPPORTS_ORDS \
	21, /* /soc/gpt@302d0000 */ \
	22, /* /soc/gpt@302e0000 */ \
	31, /* /soc/uart@30890000 */ \
	35, /* /soc/uart@30a60000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ccm_30380000_EXISTS 1
#define DT_N_INST_0_nxp_imx_ccm DT_N_S_soc_S_ccm_30380000
#define DT_N_NODELABEL_ccm      DT_N_S_soc_S_ccm_30380000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ccm_30380000_REG_NUM 1
#define DT_N_S_soc_S_ccm_30380000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_REG_IDX_0_VAL_ADDRESS 808976384 /* 0x30380000 */
#define DT_N_S_soc_S_ccm_30380000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_ccm_30380000_RANGES_NUM 0
#define DT_N_S_soc_S_ccm_30380000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ccm_30380000_IRQ_NUM 0
#define DT_N_S_soc_S_ccm_30380000_COMPAT_MATCHES_nxp_imx_ccm 1
#define DT_N_S_soc_S_ccm_30380000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_ccm_30380000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_COMPAT_MODEL_IDX_0 "imx-ccm"
#define DT_N_S_soc_S_ccm_30380000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ccm_30380000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ccm_30380000_P_reg {808976384 /* 0x30380000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_ccm_30380000_P_reg_IDX_0 808976384
#define DT_N_S_soc_S_ccm_30380000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_ccm_30380000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ccm_30380000, reg, 0) \
	fn(DT_N_S_soc_S_ccm_30380000, reg, 1)
#define DT_N_S_soc_S_ccm_30380000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ccm_30380000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ccm_30380000, reg, 1)
#define DT_N_S_soc_S_ccm_30380000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ccm_30380000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ccm_30380000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_30380000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ccm_30380000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ccm_30380000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_30380000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_P_compatible {"nxp,imx-ccm"}
#define DT_N_S_soc_S_ccm_30380000_P_compatible_IDX_0 "nxp,imx-ccm"
#define DT_N_S_soc_S_ccm_30380000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_ccm
#define DT_N_S_soc_S_ccm_30380000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_CCM
#define DT_N_S_soc_S_ccm_30380000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ccm_30380000, compatible, 0)
#define DT_N_S_soc_S_ccm_30380000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ccm_30380000, compatible, 0)
#define DT_N_S_soc_S_ccm_30380000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ccm_30380000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_30380000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ccm_30380000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ccm_30380000_P_compatible_LEN 1
#define DT_N_S_soc_S_ccm_30380000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ccm_30380000_P_wakeup_source 0
#define DT_N_S_soc_S_ccm_30380000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpt@302d0000
 *
 * Node identifier: DT_N_S_soc_S_gpt_302d0000
 *
 * Binding (compatible = nxp,imx-gpt):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/timer/nxp,imx-gpt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpt_302d0000_PATH "/soc/gpt@302d0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpt_302d0000_FULL_NAME "gpt@302d0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpt_302d0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpt_302d0000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpt_302d0000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpt_302d0000_REQUIRES_ORDS \
	4, /* /interrupt-controller@38800000 */ \
	11, /* /soc */ \
	20, /* /soc/ccm@30380000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpt_302d0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpt_302d0000_EXISTS 1
#define DT_N_INST_0_nxp_imx_gpt DT_N_S_soc_S_gpt_302d0000
#define DT_N_NODELABEL_gpt1     DT_N_S_soc_S_gpt_302d0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpt_302d0000_REG_NUM 1
#define DT_N_S_soc_S_gpt_302d0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_REG_IDX_0_VAL_ADDRESS 808255488 /* 0x302d0000 */
#define DT_N_S_soc_S_gpt_302d0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_gpt_302d0000_RANGES_NUM 0
#define DT_N_S_soc_S_gpt_302d0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpt_302d0000_IRQ_NUM 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_irq 87
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_gpt_302d0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_COMPAT_MATCHES_nxp_imx_gpt 1
#define DT_N_S_soc_S_gpt_302d0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpt_302d0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_COMPAT_MODEL_IDX_0 "imx-gpt"
#define DT_N_S_soc_S_gpt_302d0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpt_302d0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpt_302d0000_P_reg {808255488 /* 0x302d0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_gpt_302d0000_P_reg_IDX_0 808255488
#define DT_N_S_soc_S_gpt_302d0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_gpt_302d0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302d0000, reg, 0) \
	fn(DT_N_S_soc_S_gpt_302d0000, reg, 1)
#define DT_N_S_soc_S_gpt_302d0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302d0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, reg, 1)
#define DT_N_S_soc_S_gpt_302d0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302d0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302d0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts {0 /* 0x0 */, 55 /* 0x37 */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_1 55
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 3)
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 3)
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_gptfreq 24000000
#define DT_N_S_soc_S_gpt_302d0000_P_gptfreq_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_status "disabled"
#define DT_N_S_soc_S_gpt_302d0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_gpt_302d0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_gpt_302d0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_gpt_302d0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_gpt_302d0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_gpt_302d0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302d0000, status, 0) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 1) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 2) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 3) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 4) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 5) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 6) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 7)
#define DT_N_S_soc_S_gpt_302d0000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302d0000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 7)
#define DT_N_S_soc_S_gpt_302d0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302d0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302d0000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302d0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_compatible {"nxp,imx-gpt"}
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_IDX_0 "nxp,imx-gpt"
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_gpt
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_GPT
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302d0000, compatible, 0)
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302d0000, compatible, 0)
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302d0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302d0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpt_302d0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent_IDX_0 DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent_IDX_0_PH DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpt_302d0000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_30380000
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_name 3584
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_bits 20
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302d0000, clocks, 0)
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302d0000, clocks, 0)
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302d0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302d0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_LEN 1
#define DT_N_S_soc_S_gpt_302d0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_gpt_302d0000_P_wakeup_source 0
#define DT_N_S_soc_S_gpt_302d0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpt@302e0000
 *
 * Node identifier: DT_N_S_soc_S_gpt_302e0000
 *
 * Binding (compatible = nxp,imx-gpt):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/timer/nxp,imx-gpt.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpt_302e0000_PATH "/soc/gpt@302e0000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpt_302e0000_FULL_NAME "gpt@302e0000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpt_302e0000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpt_302e0000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpt_302e0000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpt_302e0000_REQUIRES_ORDS \
	4, /* /interrupt-controller@38800000 */ \
	11, /* /soc */ \
	20, /* /soc/ccm@30380000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpt_302e0000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpt_302e0000_EXISTS 1
#define DT_N_INST_1_nxp_imx_gpt DT_N_S_soc_S_gpt_302e0000
#define DT_N_NODELABEL_gpt2     DT_N_S_soc_S_gpt_302e0000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpt_302e0000_REG_NUM 1
#define DT_N_S_soc_S_gpt_302e0000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_REG_IDX_0_VAL_ADDRESS 808321024 /* 0x302e0000 */
#define DT_N_S_soc_S_gpt_302e0000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_gpt_302e0000_RANGES_NUM 0
#define DT_N_S_soc_S_gpt_302e0000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpt_302e0000_IRQ_NUM 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_irq 86
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_gpt_302e0000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_COMPAT_MATCHES_nxp_imx_gpt 1
#define DT_N_S_soc_S_gpt_302e0000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpt_302e0000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_COMPAT_MODEL_IDX_0 "imx-gpt"
#define DT_N_S_soc_S_gpt_302e0000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpt_302e0000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpt_302e0000_P_reg {808321024 /* 0x302e0000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_gpt_302e0000_P_reg_IDX_0 808321024
#define DT_N_S_soc_S_gpt_302e0000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_gpt_302e0000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302e0000, reg, 0) \
	fn(DT_N_S_soc_S_gpt_302e0000, reg, 1)
#define DT_N_S_soc_S_gpt_302e0000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302e0000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, reg, 1)
#define DT_N_S_soc_S_gpt_302e0000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302e0000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302e0000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts {0 /* 0x0 */, 54 /* 0x36 */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_1 54
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 1) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 2) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 3)
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 3)
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_gptfreq 24000000
#define DT_N_S_soc_S_gpt_302e0000_P_gptfreq_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_status "disabled"
#define DT_N_S_soc_S_gpt_302e0000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_gpt_302e0000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_gpt_302e0000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_gpt_302e0000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_gpt_302e0000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_gpt_302e0000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302e0000, status, 0) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 1) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 2) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 3) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 4) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 5) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 6) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 7)
#define DT_N_S_soc_S_gpt_302e0000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302e0000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 7)
#define DT_N_S_soc_S_gpt_302e0000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302e0000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302e0000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpt_302e0000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_compatible {"nxp,imx-gpt"}
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_IDX_0 "nxp,imx-gpt"
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_gpt
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_GPT
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302e0000, compatible, 0)
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302e0000, compatible, 0)
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302e0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302e0000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpt_302e0000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent_IDX_0 DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent_IDX_0_PH DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpt_302e0000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_30380000
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_name 3584
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_offset 104
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpt_302e0000, clocks, 0)
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpt_302e0000, clocks, 0)
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpt_302e0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpt_302e0000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_LEN 1
#define DT_N_S_soc_S_gpt_302e0000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_gpt_302e0000_P_wakeup_source 0
#define DT_N_S_soc_S_gpt_302e0000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/i2c@30a40000
 *
 * Node identifier: DT_N_S_soc_S_i2c_30a40000
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_30a40000_PATH "/soc/i2c@30a40000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_30a40000_FULL_NAME "i2c@30a40000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_30a40000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_30a40000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_30a40000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_30a40000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_30a40000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_30a40000_EXISTS 1
#define DT_N_INST_0_nxp_imx_i2c DT_N_S_soc_S_i2c_30a40000
#define DT_N_NODELABEL_i2c3     DT_N_S_soc_S_i2c_30a40000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_30a40000_REG_NUM 1
#define DT_N_S_soc_S_i2c_30a40000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_REG_IDX_0_VAL_ADDRESS 816054272 /* 0x30a40000 */
#define DT_N_S_soc_S_i2c_30a40000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_i2c_30a40000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_30a40000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_30a40000_IRQ_NUM 0
#define DT_N_S_soc_S_i2c_30a40000_COMPAT_MATCHES_nxp_imx_i2c 1
#define DT_N_S_soc_S_i2c_30a40000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_i2c_30a40000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_COMPAT_MODEL_IDX_0 "imx-i2c"
#define DT_N_S_soc_S_i2c_30a40000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_30a40000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_30a40000_P_compatible {"nxp,imx-i2c"}
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_IDX_0 "nxp,imx-i2c"
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_i2c
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_I2C
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_30a40000, compatible, 0)
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_30a40000, compatible, 0)
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_30a40000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_30a40000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_30a40000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_P_reg {816054272 /* 0x30a40000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_i2c_30a40000_P_reg_IDX_0 816054272
#define DT_N_S_soc_S_i2c_30a40000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_i2c_30a40000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_30a40000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_30a40000, reg, 1)
#define DT_N_S_soc_S_i2c_30a40000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_30a40000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, reg, 1)
#define DT_N_S_soc_S_i2c_30a40000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_30a40000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_30a40000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_30a40000_P_status "disabled"
#define DT_N_S_soc_S_i2c_30a40000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2c_30a40000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_30a40000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2c_30a40000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2c_30a40000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2c_30a40000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_30a40000, status, 0) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 1) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 2) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 3) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 4) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 5) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 6) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 7)
#define DT_N_S_soc_S_i2c_30a40000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_30a40000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 7)
#define DT_N_S_soc_S_i2c_30a40000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_30a40000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_30a40000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_30a40000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_30a40000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc_gpr@30340000
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_gpr_30340000
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_PATH "/soc/iomuxc_gpr@30340000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FULL_NAME "iomuxc_gpr@30340000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_EXISTS 1
#define DT_N_INST_0_nxp_imx_iomuxc_gpr DT_N_S_soc_S_iomuxc_gpr_30340000
#define DT_N_NODELABEL_iomuxc_gpr      DT_N_S_soc_S_iomuxc_gpr_30340000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_REG_NUM 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_REG_IDX_0_VAL_ADDRESS 808714240 /* 0x30340000 */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_gpr_30340000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_gpr_30340000_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_gpr_30340000_COMPAT_MATCHES_nxp_imx_iomuxc_gpr 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_iomuxc_gpr_30340000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_COMPAT_MODEL_IDX_0 "imx-iomuxc-gpr"
#define DT_N_S_soc_S_iomuxc_gpr_30340000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible {"nxp,imx-iomuxc-gpr"}
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_IDX_0 "nxp,imx-iomuxc-gpr"
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_iomuxc_gpr
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IOMUXC_GPR
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, compatible, 0)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, compatible, 0)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_LEN 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg {808714240 /* 0x30340000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_IDX_0 808714240
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 0) \
	fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 1)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 1)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_gpr_30340000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_gpr_30340000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c10000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c10000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c10000_PATH "/soc/sai@30c10000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c10000_FULL_NAME "sai@30c10000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c10000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c10000_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c10000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c10000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c10000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c10000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c10000_EXISTS 1
#define DT_N_INST_0_nxp_imx_sai DT_N_S_soc_S_sai_30c10000
#define DT_N_NODELABEL_sai1     DT_N_S_soc_S_sai_30c10000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c10000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c10000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_REG_IDX_0_VAL_ADDRESS 817954816 /* 0x30c10000 */
#define DT_N_S_soc_S_sai_30c10000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c10000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c10000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c10000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c10000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c10000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c10000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c10000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c10000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c10000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c10000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c10000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c10000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c10000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c10000, compatible, 0)
#define DT_N_S_soc_S_sai_30c10000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c10000, compatible, 0)
#define DT_N_S_soc_S_sai_30c10000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c10000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c10000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c10000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_P_reg {817954816 /* 0x30c10000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c10000_P_reg_IDX_0 817954816
#define DT_N_S_soc_S_sai_30c10000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c10000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c10000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c10000, reg, 1)
#define DT_N_S_soc_S_sai_30c10000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c10000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, reg, 1)
#define DT_N_S_soc_S_sai_30c10000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c10000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c10000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c10000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c10000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c10000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c10000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c10000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c10000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c10000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c10000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 7)
#define DT_N_S_soc_S_sai_30c10000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c10000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 7)
#define DT_N_S_soc_S_sai_30c10000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c10000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c10000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c10000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c10000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c10000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c20000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c20000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c20000_PATH "/soc/sai@30c20000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c20000_FULL_NAME "sai@30c20000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c20000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c20000_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c20000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c20000_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c20000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c20000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c20000_EXISTS 1
#define DT_N_INST_1_nxp_imx_sai DT_N_S_soc_S_sai_30c20000
#define DT_N_NODELABEL_sai2     DT_N_S_soc_S_sai_30c20000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c20000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c20000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_REG_IDX_0_VAL_ADDRESS 818020352 /* 0x30c20000 */
#define DT_N_S_soc_S_sai_30c20000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c20000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c20000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c20000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c20000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c20000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c20000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c20000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c20000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c20000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c20000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c20000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c20000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c20000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c20000, compatible, 0)
#define DT_N_S_soc_S_sai_30c20000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c20000, compatible, 0)
#define DT_N_S_soc_S_sai_30c20000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c20000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c20000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c20000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_P_reg {818020352 /* 0x30c20000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c20000_P_reg_IDX_0 818020352
#define DT_N_S_soc_S_sai_30c20000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c20000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c20000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c20000, reg, 1)
#define DT_N_S_soc_S_sai_30c20000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c20000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, reg, 1)
#define DT_N_S_soc_S_sai_30c20000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c20000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c20000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c20000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c20000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c20000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c20000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c20000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c20000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c20000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c20000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 7)
#define DT_N_S_soc_S_sai_30c20000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c20000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 7)
#define DT_N_S_soc_S_sai_30c20000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c20000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c20000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c20000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c20000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c20000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c30000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c30000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c30000_PATH "/soc/sai@30c30000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c30000_FULL_NAME "sai@30c30000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c30000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c30000_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c30000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c30000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c30000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c30000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c30000_EXISTS 1
#define DT_N_INST_2_nxp_imx_sai DT_N_S_soc_S_sai_30c30000
#define DT_N_NODELABEL_sai3     DT_N_S_soc_S_sai_30c30000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c30000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c30000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_REG_IDX_0_VAL_ADDRESS 818085888 /* 0x30c30000 */
#define DT_N_S_soc_S_sai_30c30000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c30000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c30000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c30000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c30000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c30000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c30000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c30000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c30000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c30000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c30000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c30000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c30000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c30000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c30000, compatible, 0)
#define DT_N_S_soc_S_sai_30c30000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c30000, compatible, 0)
#define DT_N_S_soc_S_sai_30c30000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c30000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c30000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c30000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_P_reg {818085888 /* 0x30c30000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c30000_P_reg_IDX_0 818085888
#define DT_N_S_soc_S_sai_30c30000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c30000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c30000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c30000, reg, 1)
#define DT_N_S_soc_S_sai_30c30000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c30000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, reg, 1)
#define DT_N_S_soc_S_sai_30c30000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c30000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c30000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c30000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c30000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c30000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c30000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c30000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c30000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c30000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c30000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 7)
#define DT_N_S_soc_S_sai_30c30000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c30000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 7)
#define DT_N_S_soc_S_sai_30c30000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c30000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c30000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c30000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c30000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c30000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c50000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c50000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c50000_PATH "/soc/sai@30c50000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c50000_FULL_NAME "sai@30c50000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c50000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c50000_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c50000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c50000_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c50000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c50000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c50000_EXISTS 1
#define DT_N_INST_3_nxp_imx_sai DT_N_S_soc_S_sai_30c50000
#define DT_N_NODELABEL_sai5     DT_N_S_soc_S_sai_30c50000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c50000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c50000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_REG_IDX_0_VAL_ADDRESS 818216960 /* 0x30c50000 */
#define DT_N_S_soc_S_sai_30c50000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c50000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c50000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c50000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c50000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c50000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c50000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c50000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c50000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c50000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c50000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c50000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c50000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c50000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c50000, compatible, 0)
#define DT_N_S_soc_S_sai_30c50000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c50000, compatible, 0)
#define DT_N_S_soc_S_sai_30c50000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c50000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c50000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c50000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_P_reg {818216960 /* 0x30c50000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c50000_P_reg_IDX_0 818216960
#define DT_N_S_soc_S_sai_30c50000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c50000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c50000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c50000, reg, 1)
#define DT_N_S_soc_S_sai_30c50000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c50000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, reg, 1)
#define DT_N_S_soc_S_sai_30c50000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c50000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c50000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c50000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c50000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c50000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c50000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c50000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c50000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c50000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c50000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 7)
#define DT_N_S_soc_S_sai_30c50000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c50000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 7)
#define DT_N_S_soc_S_sai_30c50000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c50000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c50000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c50000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c50000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c50000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c60000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c60000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c60000_PATH "/soc/sai@30c60000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c60000_FULL_NAME "sai@30c60000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c60000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c60000_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c60000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c60000_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c60000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c60000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c60000_EXISTS 1
#define DT_N_INST_4_nxp_imx_sai DT_N_S_soc_S_sai_30c60000
#define DT_N_NODELABEL_sai6     DT_N_S_soc_S_sai_30c60000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c60000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c60000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_REG_IDX_0_VAL_ADDRESS 818282496 /* 0x30c60000 */
#define DT_N_S_soc_S_sai_30c60000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c60000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c60000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c60000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c60000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c60000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c60000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c60000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c60000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c60000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c60000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c60000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c60000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c60000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c60000, compatible, 0)
#define DT_N_S_soc_S_sai_30c60000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c60000, compatible, 0)
#define DT_N_S_soc_S_sai_30c60000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c60000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_P_reg {818282496 /* 0x30c60000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c60000_P_reg_IDX_0 818282496
#define DT_N_S_soc_S_sai_30c60000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c60000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c60000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c60000, reg, 1)
#define DT_N_S_soc_S_sai_30c60000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c60000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, reg, 1)
#define DT_N_S_soc_S_sai_30c60000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c60000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c60000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c60000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c60000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c60000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c60000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c60000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c60000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c60000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c60000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 7)
#define DT_N_S_soc_S_sai_30c60000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c60000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 7)
#define DT_N_S_soc_S_sai_30c60000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c60000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c60000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c60000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c60000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c60000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/sai@30c80000
 *
 * Node identifier: DT_N_S_soc_S_sai_30c80000
 */

/* Node's full path: */
#define DT_N_S_soc_S_sai_30c80000_PATH "/soc/sai@30c80000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_sai_30c80000_FULL_NAME "sai@30c80000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_sai_30c80000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_sai_30c80000_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_sai_30c80000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_sai_30c80000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_sai_30c80000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_sai_30c80000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_sai_30c80000_EXISTS 1
#define DT_N_INST_5_nxp_imx_sai DT_N_S_soc_S_sai_30c80000
#define DT_N_NODELABEL_sai7     DT_N_S_soc_S_sai_30c80000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_sai_30c80000_REG_NUM 1
#define DT_N_S_soc_S_sai_30c80000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_REG_IDX_0_VAL_ADDRESS 818413568 /* 0x30c80000 */
#define DT_N_S_soc_S_sai_30c80000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_sai_30c80000_RANGES_NUM 0
#define DT_N_S_soc_S_sai_30c80000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_sai_30c80000_IRQ_NUM 0
#define DT_N_S_soc_S_sai_30c80000_COMPAT_MATCHES_nxp_imx_sai 1
#define DT_N_S_soc_S_sai_30c80000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_sai_30c80000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_COMPAT_MODEL_IDX_0 "imx-sai"
#define DT_N_S_soc_S_sai_30c80000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_sai_30c80000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_sai_30c80000_P_compatible {"nxp,imx-sai"}
#define DT_N_S_soc_S_sai_30c80000_P_compatible_IDX_0 "nxp,imx-sai"
#define DT_N_S_soc_S_sai_30c80000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_sai
#define DT_N_S_soc_S_sai_30c80000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_SAI
#define DT_N_S_soc_S_sai_30c80000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c80000, compatible, 0)
#define DT_N_S_soc_S_sai_30c80000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c80000, compatible, 0)
#define DT_N_S_soc_S_sai_30c80000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c80000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c80000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_compatible_LEN 1
#define DT_N_S_soc_S_sai_30c80000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_P_reg {818413568 /* 0x30c80000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_sai_30c80000_P_reg_IDX_0 818413568
#define DT_N_S_soc_S_sai_30c80000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_sai_30c80000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c80000, reg, 0) \
	fn(DT_N_S_soc_S_sai_30c80000, reg, 1)
#define DT_N_S_soc_S_sai_30c80000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c80000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, reg, 1)
#define DT_N_S_soc_S_sai_30c80000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c80000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c80000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_reg_EXISTS 1
#define DT_N_S_soc_S_sai_30c80000_P_status "disabled"
#define DT_N_S_soc_S_sai_30c80000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_sai_30c80000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c80000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_sai_30c80000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_sai_30c80000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_sai_30c80000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_sai_30c80000, status, 0) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 1) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 2) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 3) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 4) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 5) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 6) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 7)
#define DT_N_S_soc_S_sai_30c80000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_sai_30c80000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 7)
#define DT_N_S_soc_S_sai_30c80000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_sai_30c80000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_sai_30c80000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_sai_30c80000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_sai_30c80000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_sai_30c80000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/uart@30890000
 *
 * Node identifier: DT_N_S_soc_S_uart_30890000
 *
 * Binding (compatible = nxp,imx-iuart):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/serial/nxp,imx-iuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_30890000_PATH "/soc/uart@30890000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_30890000_FULL_NAME "uart@30890000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_30890000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_30890000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_30890000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_30890000_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_30890000_REQUIRES_ORDS \
	4, /* /interrupt-controller@38800000 */ \
	11, /* /soc */ \
	20, /* /soc/ccm@30380000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_30890000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_30890000_EXISTS 1
#define DT_N_INST_1_nxp_imx_iuart DT_N_S_soc_S_uart_30890000
#define DT_N_NODELABEL_uart2      DT_N_S_soc_S_uart_30890000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_30890000_REG_NUM 1
#define DT_N_S_soc_S_uart_30890000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_REG_IDX_0_VAL_ADDRESS 814284800 /* 0x30890000 */
#define DT_N_S_soc_S_uart_30890000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_uart_30890000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_30890000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_30890000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_irq 59
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_type DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_type
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_irq DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_flags DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_flags
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_priority DT_N_S_soc_S_uart_30890000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_uart_30890000_IRQ_NAME_irq_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_COMPAT_MATCHES_nxp_imx_iuart 1
#define DT_N_S_soc_S_uart_30890000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_uart_30890000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_COMPAT_MODEL_IDX_0 "imx-iuart"
#define DT_N_S_soc_S_uart_30890000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_30890000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_30890000_P_reg {814284800 /* 0x30890000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_uart_30890000_P_reg_IDX_0 814284800
#define DT_N_S_soc_S_uart_30890000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_uart_30890000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, reg, 0) \
	fn(DT_N_S_soc_S_uart_30890000, reg, 1)
#define DT_N_S_soc_S_uart_30890000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, reg, 1)
#define DT_N_S_soc_S_uart_30890000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_30380000
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_name 2049
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_uart_30890000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, clocks, 0)
#define DT_N_S_soc_S_uart_30890000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, clocks, 0)
#define DT_N_S_soc_S_uart_30890000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_30890000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_30890000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_status "disabled"
#define DT_N_S_soc_S_uart_30890000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_30890000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_30890000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_30890000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_30890000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_30890000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, status, 0) \
	fn(DT_N_S_soc_S_uart_30890000, status, 1) \
	fn(DT_N_S_soc_S_uart_30890000, status, 2) \
	fn(DT_N_S_soc_S_uart_30890000, status, 3) \
	fn(DT_N_S_soc_S_uart_30890000, status, 4) \
	fn(DT_N_S_soc_S_uart_30890000, status, 5) \
	fn(DT_N_S_soc_S_uart_30890000, status, 6) \
	fn(DT_N_S_soc_S_uart_30890000, status, 7)
#define DT_N_S_soc_S_uart_30890000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 7)
#define DT_N_S_soc_S_uart_30890000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_compatible {"nxp,imx-iuart"}
#define DT_N_S_soc_S_uart_30890000_P_compatible_IDX_0 "nxp,imx-iuart"
#define DT_N_S_soc_S_uart_30890000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_iuart
#define DT_N_S_soc_S_uart_30890000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IUART
#define DT_N_S_soc_S_uart_30890000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, compatible, 0)
#define DT_N_S_soc_S_uart_30890000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, compatible, 0)
#define DT_N_S_soc_S_uart_30890000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_30890000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupts {0 /* 0x0 */, 27 /* 0x1b */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_1 27
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_uart_30890000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 2) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 3)
#define DT_N_S_soc_S_uart_30890000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 3)
#define DT_N_S_soc_S_uart_30890000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30890000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names {"irq_0"}
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_IDX_0 "irq_0"
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_IDX_0_STRING_TOKEN irq_0
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN IRQ_0
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30890000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30890000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30890000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30890000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent_IDX_0 DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent_IDX_0_PH DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_30890000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_30890000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_30890000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000
 *
 * Binding (compatible = nxp,imx-iomuxc):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/pinctrl/nxp,imx-iomuxc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_PATH "/soc/iomuxc@30330000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_FULL_NAME "iomuxc@30330000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_REQUIRES_ORDS \
	11, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_SUPPORTS_ORDS \
	33, /* /soc/iomuxc@30330000/pinctrl */ \
	36, /* /soc/iomuxc@30330000/IOMUXC_UART2_RXD_UART_RX_UART2_RX */ \
	37, /* /soc/iomuxc@30330000/IOMUXC_UART2_TXD_UART_TX_UART2_TX */ \
	40, /* /soc/iomuxc@30330000/IOMUXC_UART4_RXD_UART_RX_UART4_RX */ \
	41, /* /soc/iomuxc@30330000/IOMUXC_UART4_TXD_UART_TX_UART4_TX */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_EXISTS 1
#define DT_N_INST_0_nxp_imx_iomuxc DT_N_S_soc_S_iomuxc_30330000
#define DT_N_NODELABEL_iomuxc      DT_N_S_soc_S_iomuxc_30330000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_REG_NUM 1
#define DT_N_S_soc_S_iomuxc_30330000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_REG_IDX_0_VAL_ADDRESS 808648704 /* 0x30330000 */
#define DT_N_S_soc_S_iomuxc_30330000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_iomuxc_30330000_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_COMPAT_MATCHES_nxp_imx_iomuxc 1
#define DT_N_S_soc_S_iomuxc_30330000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_iomuxc_30330000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_COMPAT_MODEL_IDX_0 "imx-iomuxc"
#define DT_N_S_soc_S_iomuxc_30330000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_P_reg {808648704 /* 0x30330000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_IDX_0 808648704
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000, reg, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000, reg, 1)
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, reg, 1)
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_reg_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_status "okay"
#define DT_N_S_soc_S_iomuxc_30330000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_iomuxc_30330000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_iomuxc_30330000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_iomuxc_30330000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_iomuxc_30330000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_iomuxc_30330000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000, status, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 3)
#define DT_N_S_soc_S_iomuxc_30330000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 3)
#define DT_N_S_soc_S_iomuxc_30330000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_status_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible {"nxp,imx-iomuxc"}
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_IDX_0 "nxp,imx-iomuxc"
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_iomuxc
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IOMUXC
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000, compatible, 0)
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000, compatible, 0)
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_LEN 1
#define DT_N_S_soc_S_iomuxc_30330000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_P_wakeup_source 0
#define DT_N_S_soc_S_iomuxc_30330000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/pinctrl
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_pinctrl
 *
 * Binding (compatible = nxp,imx8mp-pinctrl):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/pinctrl/nxp,imx8mp-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_PATH "/soc/iomuxc@30330000/pinctrl"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FULL_NAME "pinctrl"

/* Node parent (/soc/iomuxc@30330000) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_PARENT DT_N_S_soc_S_iomuxc_30330000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default, __VA_ARGS__) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_REQUIRES_ORDS \
	32, /* /soc/iomuxc@30330000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_SUPPORTS_ORDS \
	34, /* /soc/iomuxc@30330000/pinctrl/uart4_default */ \
	38, /* /soc/iomuxc@30330000/pinctrl/uart2_default */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_EXISTS 1
#define DT_N_INST_0_nxp_imx8mp_pinctrl DT_N_S_soc_S_iomuxc_30330000_S_pinctrl
#define DT_N_NODELABEL_pinctrl         DT_N_S_soc_S_iomuxc_30330000_S_pinctrl

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_COMPAT_MATCHES_nxp_imx8mp_pinctrl 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_COMPAT_MODEL_IDX_0 "imx8mp-pinctrl"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status "okay"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_status_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible {"nxp,imx8mp-pinctrl"}
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_IDX_0 "nxp,imx8mp-pinctrl"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_IDX_0_STRING_TOKEN nxp_imx8mp_pinctrl
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX8MP_PINCTRL
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, compatible, 0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, compatible, 0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_LEN 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_compatible_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_wakeup_source 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/pinctrl/uart4_default
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_PATH "/soc/iomuxc@30330000/pinctrl/uart4_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FULL_NAME "uart4_default"

/* Node parent (/soc/iomuxc@30330000/pinctrl) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_PARENT DT_N_S_soc_S_iomuxc_30330000_S_pinctrl

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_REQUIRES_ORDS \
	33, /* /soc/iomuxc@30330000/pinctrl */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_SUPPORTS_ORDS \
	35, /* /soc/uart@30a60000 */ \
	42, /* /soc/iomuxc@30330000/pinctrl/uart4_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_EXISTS 1
#define DT_N_NODELABEL_uart4_default DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/uart@30a60000
 *
 * Node identifier: DT_N_S_soc_S_uart_30a60000
 *
 * Binding (compatible = nxp,imx-iuart):
 *   /home/efacec/nxp/Repositories/hww/zephyr/dts/bindings/serial/nxp,imx-iuart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_30a60000_PATH "/soc/uart@30a60000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_30a60000_FULL_NAME "uart@30a60000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_30a60000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_30a60000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_30a60000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_30a60000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_30a60000_REQUIRES_ORDS \
	4, /* /interrupt-controller@38800000 */ \
	11, /* /soc */ \
	20, /* /soc/ccm@30380000 */ \
	34, /* /soc/iomuxc@30330000/pinctrl/uart4_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_30a60000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_30a60000_EXISTS 1
#define DT_N_INST_0_nxp_imx_iuart DT_N_S_soc_S_uart_30a60000
#define DT_N_NODELABEL_uart4      DT_N_S_soc_S_uart_30a60000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_30a60000_REG_NUM 1
#define DT_N_S_soc_S_uart_30a60000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_REG_IDX_0_VAL_ADDRESS 816185344 /* 0x30a60000 */
#define DT_N_S_soc_S_uart_30a60000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_uart_30a60000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_30a60000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_30a60000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_type 0
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_irq 61
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_flags 2
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_priority 160
#define DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_type DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_type
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_type_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_irq DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_irq
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_flags DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_flags
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_priority DT_N_S_soc_S_uart_30a60000_IRQ_IDX_0_VAL_priority
#define DT_N_S_soc_S_uart_30a60000_IRQ_NAME_irq_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_COMPAT_MATCHES_nxp_imx_iuart 1
#define DT_N_S_soc_S_uart_30a60000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_uart_30a60000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_COMPAT_MODEL_IDX_0 "imx-iuart"
#define DT_N_S_soc_S_uart_30a60000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_NUM 1
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_uart_30a60000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default

/* Generic property macros: */
#define DT_N_S_soc_S_uart_30a60000_P_reg {816185344 /* 0x30a60000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_uart_30a60000_P_reg_IDX_0 816185344
#define DT_N_S_soc_S_uart_30a60000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_uart_30a60000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, reg, 0) \
	fn(DT_N_S_soc_S_uart_30a60000, reg, 1)
#define DT_N_S_soc_S_uart_30a60000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, reg, 1)
#define DT_N_S_soc_S_uart_30a60000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_PH DT_N_S_soc_S_ccm_30380000
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_name 2051
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_offset 108
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_offset_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_bits 24
#define DT_N_S_soc_S_uart_30a60000_P_clocks_IDX_0_VAL_bits_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, clocks, 0)
#define DT_N_S_soc_S_uart_30a60000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, clocks, 0)
#define DT_N_S_soc_S_uart_30a60000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_0, 0)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_names, 0)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_pinctrl_names_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_current_speed 115200
#define DT_N_S_soc_S_uart_30a60000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_30a60000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_status "okay"
#define DT_N_S_soc_S_uart_30a60000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_30a60000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_30a60000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_30a60000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_30a60000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_30a60000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, status, 0) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 1) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 2) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 3)
#define DT_N_S_soc_S_uart_30a60000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 3)
#define DT_N_S_soc_S_uart_30a60000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_compatible {"nxp,imx-iuart"}
#define DT_N_S_soc_S_uart_30a60000_P_compatible_IDX_0 "nxp,imx-iuart"
#define DT_N_S_soc_S_uart_30a60000_P_compatible_IDX_0_STRING_TOKEN nxp_imx_iuart
#define DT_N_S_soc_S_uart_30a60000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IMX_IUART
#define DT_N_S_soc_S_uart_30a60000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, compatible, 0)
#define DT_N_S_soc_S_uart_30a60000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, compatible, 0)
#define DT_N_S_soc_S_uart_30a60000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupts {0 /* 0x0 */, 29 /* 0x1d */, 2 /* 0x2 */, 160 /* 0xa0 */}
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_1 29
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_2 2
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_3 160
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 2) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 3)
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 3)
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_30a60000, interrupts, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names {"irq_0"}
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_IDX_0 "irq_0"
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_IDX_0_STRING_TOKEN irq_0
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_IDX_0_STRING_UPPER_TOKEN IRQ_0
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_30a60000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_30a60000, interrupt_names, 0)
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_30a60000, interrupt_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_names_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent_IDX_0 DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent_IDX_0_PH DT_N_S_interrupt_controller_38800000
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_30a60000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_30a60000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_30a60000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/IOMUXC_UART2_RXD_UART_RX_UART2_RX
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_PATH "/soc/iomuxc@30330000/IOMUXC_UART2_RXD_UART_RX_UART2_RX"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FULL_NAME "IOMUXC_UART2_RXD_UART_RX_UART2_RX"

/* Node parent (/soc/iomuxc@30330000) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_PARENT DT_N_S_soc_S_iomuxc_30330000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_REQUIRES_ORDS \
	32, /* /soc/iomuxc@30330000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_SUPPORTS_ORDS \
	39, /* /soc/iomuxc@30330000/pinctrl/uart2_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_EXISTS 1
#define DT_N_NODELABEL_iomuxc_uart2_rxd_uart_rx_uart2_rx DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux {808649256 /* 0x30330228 */, 0 /* 0x0 */, 808650224 /* 0x303305f0 */, 6 /* 0x6 */, 808649864 /* 0x30330488 */}
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_0 808649256
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_1 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_2 808650224
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_3 6
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_3_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_4 808649864
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_IDX_4_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 3) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_LEN 5
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_pue 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_pue_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_pdrv 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_pdrv_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_lpsr 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_lpsr_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_snvs 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx_P_pin_snvs_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/IOMUXC_UART2_TXD_UART_TX_UART2_TX
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_PATH "/soc/iomuxc@30330000/IOMUXC_UART2_TXD_UART_TX_UART2_TX"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FULL_NAME "IOMUXC_UART2_TXD_UART_TX_UART2_TX"

/* Node parent (/soc/iomuxc@30330000) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_PARENT DT_N_S_soc_S_iomuxc_30330000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_REQUIRES_ORDS \
	32, /* /soc/iomuxc@30330000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_SUPPORTS_ORDS \
	39, /* /soc/iomuxc@30330000/pinctrl/uart2_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_EXISTS 1
#define DT_N_NODELABEL_iomuxc_uart2_txd_uart_tx_uart2_tx DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux {808649260 /* 0x3033022c */, 0 /* 0x0 */, 0 /* 0x0 */, 0 /* 0x0 */, 808649868 /* 0x3033048c */}
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_0 808649260
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_1 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_2 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_3 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_3_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_4 808649868
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_IDX_4_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 3) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_LEN 5
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_pue 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_pue_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_pdrv 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_pdrv_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_lpsr 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_lpsr_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_snvs 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx_P_pin_snvs_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/pinctrl/uart2_default
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_PATH "/soc/iomuxc@30330000/pinctrl/uart2_default"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FULL_NAME "uart2_default"

/* Node parent (/soc/iomuxc@30330000/pinctrl) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_PARENT DT_N_S_soc_S_iomuxc_30330000_S_pinctrl

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_REQUIRES_ORDS \
	33, /* /soc/iomuxc@30330000/pinctrl */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_SUPPORTS_ORDS \
	39, /* /soc/iomuxc@30330000/pinctrl/uart2_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_EXISTS 1
#define DT_N_NODELABEL_uart2_default DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/iomuxc@30330000/pinctrl/uart2_default/group0
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_PATH "/soc/iomuxc@30330000/pinctrl/uart2_default/group0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FULL_NAME "group0"

/* Node parent (/soc/iomuxc@30330000/pinctrl/uart2_default) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_PARENT DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_REQUIRES_ORDS \
	36, /* /soc/iomuxc@30330000/IOMUXC_UART2_RXD_UART_RX_UART2_RX */ \
	37, /* /soc/iomuxc@30330000/IOMUXC_UART2_TXD_UART_TX_UART2_TX */ \
	38, /* /soc/iomuxc@30330000/pinctrl/uart2_default */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_0 DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_0_PH DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_1 DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_1_PH DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_LEN 2
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength "x1"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_STRING_TOKEN x1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_STRING_UPPER_TOKEN X1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_ENUM_IDX 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_ENUM_TOKEN x1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_ENUM_UPPER_TOKEN X1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, drive_strength, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate "slow"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_STRING_TOKEN slow
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_STRING_UPPER_TOKEN SLOW
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_ENUM_TOKEN slow
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_ENUM_UPPER_TOKEN SLOW
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0, slew_rate, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_bias_pull_up 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_bias_pull_down 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_open_drain 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_input_enable 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/IOMUXC_UART4_RXD_UART_RX_UART4_RX
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_PATH "/soc/iomuxc@30330000/IOMUXC_UART4_RXD_UART_RX_UART4_RX"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FULL_NAME "IOMUXC_UART4_RXD_UART_RX_UART4_RX"

/* Node parent (/soc/iomuxc@30330000) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_PARENT DT_N_S_soc_S_iomuxc_30330000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_REQUIRES_ORDS \
	32, /* /soc/iomuxc@30330000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_SUPPORTS_ORDS \
	42, /* /soc/iomuxc@30330000/pinctrl/uart4_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_EXISTS 1
#define DT_N_NODELABEL_iomuxc_uart4_rxd_uart_rx_uart4_rx DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux {808649272 /* 0x30330238 */, 0 /* 0x0 */, 808650240 /* 0x30330600 */, 8 /* 0x8 */, 808649880 /* 0x30330498 */}
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_0 808649272
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_1 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_2 808650240
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_3 8
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_3_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_4 808649880
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_IDX_4_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 3) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_LEN 5
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_pue 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_pue_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_pdrv 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_pdrv_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_lpsr 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_lpsr_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_snvs 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx_P_pin_snvs_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/IOMUXC_UART4_TXD_UART_TX_UART4_TX
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_PATH "/soc/iomuxc@30330000/IOMUXC_UART4_TXD_UART_TX_UART4_TX"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FULL_NAME "IOMUXC_UART4_TXD_UART_TX_UART4_TX"

/* Node parent (/soc/iomuxc@30330000) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_PARENT DT_N_S_soc_S_iomuxc_30330000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_REQUIRES_ORDS \
	32, /* /soc/iomuxc@30330000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_SUPPORTS_ORDS \
	42, /* /soc/iomuxc@30330000/pinctrl/uart4_default/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_EXISTS 1
#define DT_N_NODELABEL_iomuxc_uart4_txd_uart_tx_uart4_tx DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux {808649276 /* 0x3033023c */, 0 /* 0x0 */, 0 /* 0x0 */, 0 /* 0x0 */, 808649884 /* 0x3033049c */}
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_0 808649276
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_1 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_2 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_3 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_3_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_4 808649884
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_IDX_4_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 3) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 4)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx, pinmux, 4, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_LEN 5
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_pue 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_pue_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_pdrv 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_pdrv_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_lpsr 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_lpsr_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_snvs 0
#define DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx_P_pin_snvs_EXISTS 1

/*
 * Devicetree node: /soc/iomuxc@30330000/pinctrl/uart4_default/group0
 *
 * Node identifier: DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_PATH "/soc/iomuxc@30330000/pinctrl/uart4_default/group0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FULL_NAME "group0"

/* Node parent (/soc/iomuxc@30330000/pinctrl/uart4_default) identifier: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_PARENT DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_REQUIRES_ORDS \
	34, /* /soc/iomuxc@30330000/pinctrl/uart4_default */ \
	40, /* /soc/iomuxc@30330000/IOMUXC_UART4_RXD_UART_RX_UART4_RX */ \
	41, /* /soc/iomuxc@30330000/IOMUXC_UART4_TXD_UART_TX_UART4_TX */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_REG_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_RANGES_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_IRQ_NUM 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_0 DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_0_PH DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_1 DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_1_PH DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_LEN 2
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength "x1"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_STRING_TOKEN x1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_STRING_UPPER_TOKEN X1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_ENUM_IDX 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_ENUM_TOKEN x1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_ENUM_UPPER_TOKEN X1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 1)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, drive_strength, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_strength_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate "slow"
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_STRING_TOKEN slow
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_STRING_UPPER_TOKEN SLOW
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_ENUM_TOKEN slow
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_ENUM_UPPER_TOKEN SLOW
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 0) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 1) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 2) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 3)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0, slew_rate, 3, __VA_ARGS__)
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_bias_pull_up 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_bias_pull_down 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_open_drain 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_input_enable 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_input_enable_EXISTS 1
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0_P_input_schmitt_enable_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_30a60000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_30a60000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_c0000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_gpio_30230000) fn(DT_N_S_soc_S_gpio_30240000) fn(DT_N_S_soc_S_gpt_302d0000) fn(DT_N_S_soc_S_gpt_302e0000) fn(DT_N_S_soc_S_iomuxc_30330000) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx) fn(DT_N_S_soc_S_iomuxc_gpr_30340000) fn(DT_N_S_soc_S_ana_pll_30360000) fn(DT_N_S_soc_S_ccm_30380000) fn(DT_N_S_soc_S_gpc_303a0000) fn(DT_N_S_soc_S_flexcan_308c0000) fn(DT_N_S_soc_S_uart_30890000) fn(DT_N_S_soc_S_i2c_30a40000) fn(DT_N_S_soc_S_uart_30a60000) fn(DT_N_S_soc_S_enet_30be0000) fn(DT_N_S_soc_S_enet_30bf0000) fn(DT_N_S_soc_S_sai_30c10000) fn(DT_N_S_soc_S_sai_30c20000) fn(DT_N_S_soc_S_sai_30c30000) fn(DT_N_S_soc_S_sai_30c50000) fn(DT_N_S_soc_S_sai_30c60000) fn(DT_N_S_soc_S_sai_30c80000) fn(DT_N_S_soc_S_audio_blk_ctrl_30e20000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_cpu_2) fn(DT_N_S_cpus_S_cpu_3) fn(DT_N_S_timer) fn(DT_N_S_interrupt_controller_38800000) fn(DT_N_S_memory_c0000000)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_gpio_30230000) fn(DT_N_S_soc_S_gpio_30240000) fn(DT_N_S_soc_S_iomuxc_30330000) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart2_default_S_group0) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl_S_uart4_default_S_group0) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_rxd_uart_rx_uart2_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart2_txd_uart_tx_uart2_tx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_rxd_uart_rx_uart4_rx) fn(DT_N_S_soc_S_iomuxc_30330000_S_iomuxc_uart4_txd_uart_tx_uart4_tx) fn(DT_N_S_soc_S_iomuxc_gpr_30340000) fn(DT_N_S_soc_S_ana_pll_30360000) fn(DT_N_S_soc_S_ccm_30380000) fn(DT_N_S_soc_S_gpc_303a0000) fn(DT_N_S_soc_S_flexcan_308c0000) fn(DT_N_S_soc_S_uart_30a60000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_3) fn(DT_N_S_timer) fn(DT_N_S_interrupt_controller_38800000) fn(DT_N_S_memory_c0000000)

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_fsl_mimx8mp 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_igpio 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_iomuxc 1
#define DT_COMPAT_HAS_OKAY_nxp_imx8mp_pinctrl 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_iomuxc_gpr 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_ana 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_ccm 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_gpc 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_flexcan 1
#define DT_COMPAT_HAS_OKAY_nxp_imx_iuart 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_a53 1
#define DT_COMPAT_HAS_OKAY_arm_armv8_timer 1
#define DT_COMPAT_HAS_OKAY_arm_gic 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_fsl_mimx8mp_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_nxp_imx_igpio_NUM_OKAY 2
#define DT_N_INST_nxp_imx_iomuxc_NUM_OKAY 1
#define DT_N_INST_nxp_imx8mp_pinctrl_NUM_OKAY 1
#define DT_N_INST_nxp_imx_iomuxc_gpr_NUM_OKAY 1
#define DT_N_INST_nxp_imx_ana_NUM_OKAY 1
#define DT_N_INST_nxp_imx_ccm_NUM_OKAY 1
#define DT_N_INST_nxp_imx_gpc_NUM_OKAY 1
#define DT_N_INST_nxp_imx_flexcan_NUM_OKAY 1
#define DT_N_INST_nxp_imx_iuart_NUM_OKAY 1
#define DT_N_INST_arm_cortex_a53_NUM_OKAY 1
#define DT_N_INST_arm_armv8_timer_NUM_OKAY 1
#define DT_N_INST_arm_gic_NUM_OKAY 1
#define DT_FOREACH_OKAY_fsl_mimx8mp(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_fsl_mimx8mp(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fsl_mimx8mp(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fsl_mimx8mp(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_igpio(fn) fn(DT_N_S_soc_S_gpio_30230000) fn(DT_N_S_soc_S_gpio_30240000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_igpio(fn, ...) fn(DT_N_S_soc_S_gpio_30230000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_30240000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_igpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_igpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_iomuxc(fn) fn(DT_N_S_soc_S_iomuxc_30330000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_iomuxc(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_iomuxc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_iomuxc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx8mp_pinctrl(fn) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl)
#define DT_FOREACH_OKAY_VARGS_nxp_imx8mp_pinctrl(fn, ...) fn(DT_N_S_soc_S_iomuxc_30330000_S_pinctrl, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx8mp_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx8mp_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_iomuxc_gpr(fn) fn(DT_N_S_soc_S_iomuxc_gpr_30340000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_iomuxc_gpr(fn, ...) fn(DT_N_S_soc_S_iomuxc_gpr_30340000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_iomuxc_gpr(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_iomuxc_gpr(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_ana(fn) fn(DT_N_S_soc_S_ana_pll_30360000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_ana(fn, ...) fn(DT_N_S_soc_S_ana_pll_30360000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_ana(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_ana(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_ccm(fn) fn(DT_N_S_soc_S_ccm_30380000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_ccm(fn, ...) fn(DT_N_S_soc_S_ccm_30380000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_ccm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_ccm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_gpc(fn) fn(DT_N_S_soc_S_gpc_303a0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_gpc(fn, ...) fn(DT_N_S_soc_S_gpc_303a0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_gpc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_gpc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_flexcan(fn) fn(DT_N_S_soc_S_flexcan_308c0000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_flexcan(fn, ...) fn(DT_N_S_soc_S_flexcan_308c0000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_flexcan(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_flexcan(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_imx_iuart(fn) fn(DT_N_S_soc_S_uart_30a60000)
#define DT_FOREACH_OKAY_VARGS_nxp_imx_iuart(fn, ...) fn(DT_N_S_soc_S_uart_30a60000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_imx_iuart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_imx_iuart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_a53(fn) fn(DT_N_S_cpus_S_cpu_3)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_a53(fn, ...) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_a53(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_a53(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv8_timer(fn) fn(DT_N_S_timer)
#define DT_FOREACH_OKAY_VARGS_arm_armv8_timer(fn, ...) fn(DT_N_S_timer, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv8_timer(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv8_timer(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_gic(fn) fn(DT_N_S_interrupt_controller_38800000)
#define DT_FOREACH_OKAY_VARGS_arm_gic(fn, ...) fn(DT_N_S_interrupt_controller_38800000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_gic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_gic(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
